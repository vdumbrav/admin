/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteRouteImport } from './routes/auth/route'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as AuthenticatedQuestsIndexRouteImport } from './routes/_authenticated/quests/index'
import { Route as AuthenticatedQuestsNewRouteImport } from './routes/_authenticated/quests/new'
import { Route as AuthenticatedQuestsIdRouteImport } from './routes/_authenticated/quests/$id'

const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedQuestsIndexRoute =
  AuthenticatedQuestsIndexRouteImport.update({
    id: '/quests/',
    path: '/quests/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedQuestsNewRoute = AuthenticatedQuestsNewRouteImport.update({
  id: '/quests/new',
  path: '/quests/new',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedQuestsIdRoute = AuthenticatedQuestsIdRouteImport.update({
  id: '/quests/$id',
  path: '/quests/$id',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRoute
  '/sign-in': typeof authSignInRoute
  '/quests/$id': typeof AuthenticatedQuestsIdRoute
  '/quests/new': typeof AuthenticatedQuestsNewRoute
  '/quests': typeof AuthenticatedQuestsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteRoute
  '/sign-in': typeof authSignInRoute
  '/quests/$id': typeof AuthenticatedQuestsIdRoute
  '/quests/new': typeof AuthenticatedQuestsNewRoute
  '/quests': typeof AuthenticatedQuestsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/auth': typeof AuthRouteRoute
  '/(auth)/sign-in': typeof authSignInRoute
  '/_authenticated/quests/$id': typeof AuthenticatedQuestsIdRoute
  '/_authenticated/quests/new': typeof AuthenticatedQuestsNewRoute
  '/_authenticated/quests/': typeof AuthenticatedQuestsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/sign-in'
    | '/quests/$id'
    | '/quests/new'
    | '/quests'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/sign-in' | '/quests/$id' | '/quests/new' | '/quests'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/auth'
    | '/(auth)/sign-in'
    | '/_authenticated/quests/$id'
    | '/_authenticated/quests/new'
    | '/_authenticated/quests/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRoute
  authSignInRoute: typeof authSignInRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/quests/': {
      id: '/_authenticated/quests/'
      path: '/quests'
      fullPath: '/quests'
      preLoaderRoute: typeof AuthenticatedQuestsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/quests/new': {
      id: '/_authenticated/quests/new'
      path: '/quests/new'
      fullPath: '/quests/new'
      preLoaderRoute: typeof AuthenticatedQuestsNewRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/quests/$id': {
      id: '/_authenticated/quests/$id'
      path: '/quests/$id'
      fullPath: '/quests/$id'
      preLoaderRoute: typeof AuthenticatedQuestsIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedQuestsIdRoute: typeof AuthenticatedQuestsIdRoute
  AuthenticatedQuestsNewRoute: typeof AuthenticatedQuestsNewRoute
  AuthenticatedQuestsIndexRoute: typeof AuthenticatedQuestsIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedQuestsIdRoute: AuthenticatedQuestsIdRoute,
  AuthenticatedQuestsNewRoute: AuthenticatedQuestsNewRoute,
  AuthenticatedQuestsIndexRoute: AuthenticatedQuestsIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRoute,
  authSignInRoute: authSignInRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
